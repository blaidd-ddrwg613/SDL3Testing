#include "Game.h"

Game::Game(): mWindow(nullptr), mRenderer(nullptr), mIsRunning(true),
mTicksCount(0), mActiveActors(), mPendingActors(), mUpdatingActors(false) {}

bool Game::Init()
{
    if (!SDL_Init(SDL_INIT_VIDEO))
    {
        SDL_Log("ERROR::FAILED TO INIT SDL %s ", SDL_GetError());
        return false;
    }

    mWindow = SDL_CreateWindow("SDL Window", 1080, 720, 0);
    if (mWindow == NULL)
    {
        SDL_Log("ERROR::FAILED TO CREATE SDL WINDOW %s ", SDL_GetError());
        return false;
    }

    mRenderer = SDL_CreateRenderer(mWindow, NULL);
    if (mRenderer == NULL)
    {
        SDL_Log("ERROR::FAILED TO CREATE SDL RENDERER %s ", SDL_GetError());
        return false;
    }

    return true;
}

void Game::RunLoop()
{
    while (mIsRunning)
    {
        ProcessInput();
        UpdateGame();
        GenerateOutput();
    }
}

void Game::ProcessInput()
{
    SDL_Event event;

    while (SDL_PollEvent(&event))
    {
        switch (event.type)
        {
            case SDL_EVENT_QUIT:
                mIsRunning = false;
        }
    }

    const auto* keyboardState = reinterpret_cast<const Uint8 *>(SDL_GetKeyboardState(NULL));
    if (keyboardState[SDL_SCANCODE_ESCAPE])
    {
        mIsRunning = false;
    }
}

void Game::UpdateGame() {
    LimitFrames(16);
    deltaTime = GetDeltaTime();
    ClampDeltaTime(0.05f);
    // Update Tick count for next Frame
    mTicksCount = SDL_GetTicks();

    UpdateActors();

}

void Game::GenerateOutput()
{
    SDL_SetRenderDrawColor(mRenderer, 150, 50, 175, 255);
    SDL_RenderClear(mRenderer);
    SDL_RenderPresent(mRenderer);
}

void Game::AddActor(Actor *actor)
{
    // Check if actors are updating
    if (mUpdatingActors)
    {
        mPendingActors.emplace_back(actor);
    } else
    {
        mActiveActors.emplace_back(actor);
    }
}

void Game::RemoveActor(Actor *actor)
{
    auto iter = std::find(mPendingActors.begin(), mPendingActors.end(), actor);
    if (iter != mPendingActors.end())
    {
        // Swap to end of vector and pop off (avoid erase copies)
        std::iter_swap(iter, mPendingActors.end() - 1);
        mPendingActors.pop_back();
    }

    iter = std::find(mActiveActors.begin(), mActiveActors.end(), actor);
    if (iter != mActiveActors.end())
    {
        // Swap to end of vector and pop off (avoid erase copies)
        std::iter_swap(iter, mActiveActors.end() - 1);
        mActiveActors.pop_back();
    }
}

void Game::UpdateActors()
{
    // Update Actors
    mUpdatingActors = true;
    for (auto actor : mActiveActors)
    {
        actor->Update(deltaTime);
    }
    mUpdatingActors = false;

    // Move Pending Actors to Active Actors
    for (auto actor : mPendingActors)
    {
        mActiveActors.emplace_back(actor);
    }
    mPendingActors.clear();

    // Add and dead Actors to a temp vector
    std::vector<Actor*> deadActors;
    for (auto actor : mActiveActors)
    {
        if (actor->GetState() == Actor::EDead)
        {
            deadActors.emplace_back(actor);
        }
    }
    // Delete Dead Actors
    for (auto actor : deadActors)
    {
        delete actor;
    }
}

void Game::UnloadData()
{
    // Delete actors
    // Because ~Actor calls RemoveActor, have to use a different style loop
    while (!mActiveActors.empty())
    {
        delete mActiveActors.back();
    }

    // Destroy textures
    for (auto i : mTextures)
    {
        SDL_DestroyTexture(i.second);
    }
    mTextures.clear();
}


SDL_Texture *Game::GetTexture(const std::string &fileName)
{
    SDL_Texture* tex = nullptr;
    // Is the texture already in the map?
    auto iter = mTextures.find(fileName);
    if (iter != mTextures.end())
    {
        tex = iter->second;
    }
    else
    {
        // Load from file
        SDL_Surface* surf = IMG_Load(fileName.c_str());
        if (!surf)
        {
            SDL_Log("Failed to load texture file %s", fileName.c_str());
            return nullptr;
        }

        // Create texture from surface
        tex = SDL_CreateTextureFromSurface(mRenderer, surf);
        SDL_DestroySurface(surf);
        if (!tex)
        {
            SDL_Log("Failed to convert surface to texture for %s", fileName.c_str());
            return nullptr;
        }

        mTextures.emplace(fileName.c_str(), tex);
    }
    return tex;
}

float Game::GetDeltaTime()
{
    // Delta Time in seconds
    float dt = (SDL_GetTicks() - mTicksCount) / 1000.0f;

    return deltaTime;
}

void Game::LimitFrames(int durationMs)
{
    // Frame Limiting each frame will last 16ms
    while (!SDL_GetTicks() >= SDL_GetTicks() + durationMs);
}

void Game::ClampDeltaTime(float maxAmount)
{
    // Clamp maximum Delta time
    if (deltaTime > maxAmount)
    {
        deltaTime = maxAmount;
    }
}

void Game::Shutdown()
{
    SDL_DestroyRenderer(mRenderer);
    SDL_DestroyWindow(mWindow);
    SDL_Quit();
}